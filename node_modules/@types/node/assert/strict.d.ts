/**
 * TypeScript declaration file for Node.js 'assert/strict' module.
 * 
 * This module provides precise type definitions for the strict assertion library,
 * enabling robust type safety and developer productivity in TypeScript projects.
 * Designed for scalability and maintainability, it supports enterprise-grade
 * applications with comprehensive documentation and full compatibility with
 * Node.js's strict assertion APIs.
 * 
 * WHY IT MATTERS FOR INVESTORS:
 * - Enhances developer experience with accurate type checking, reducing bugs
 *   and support costs in production environments.
 * - Supports large-scale TypeScript adoption, aligning with modern JavaScript
 *   ecosystems and increasing market appeal.
 * - Maintainable and extensible structure ensures long-term compatibility with
 *   Node.js updates, minimizing maintenance overhead.
 */

declare module "assert/strict" {
    import { CallTracker } from "node:assert";

    /**
     * AssertionError class for handling assertion failures with detailed diagnostics.
     */
    class AssertionError extends Error {
        constructor(options?: {
            message?: string;
            actual?: any;
            expected?: any;
            operator?: string;
            stackStartFn?: Function;
        });
        actual: any;
        expected: any;
        operator: string;
        generatedMessage: boolean;
        code: "ERR_ASSERTION";
    }

    /**
     * Strict assertion functions for type-safe and reliable testing.
     */
    interface AssertStrict {
        /**
         * Tests strict equality (===) between actual and expected values.
         * @param actual The value to test.
         * @param expected The expected value.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the assertion fails.
         */
        (actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests strict equality (===) with explicit method call.
         * @param actual The value to test.
         * @param expected The expected value.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the assertion fails.
         */
        equal(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests strict inequality (!==) between actual and expected values.
         * @param actual The value to test.
         * @param expected The value that actual should not equal.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the assertion fails.
         */
        notEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests deep strict equality between actual and expected objects.
         * @param actual The value to test.
         * @param expected The expected value.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the assertion fails.
         */
        deepEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests deep strict inequality between actual and expected objects.
         * @param actual The value to test.
         * @param expected The value that actual should not equal.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the assertion fails.
         */
        notDeepEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests if value is truthy.
         * @param value The value to test.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the value is not truthy.
         */
        ok(value: any, message?: string | Error): void;

        /**
         * Tests if value is falsy.
         * @param value The value to test.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the value is not falsy.
         */
        ifError(value: any, message?: string | Error): void;

        /**
         * Tests that a function throws an error.
         * @param fn The function expected to throw.
         * @param error Expected error type, regex, or validation function.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the function does not throw as expected.
         */
        throws(
            fn: () => any,
            error?:
                | RegExp
                | ((err: any) => boolean)
                | { new (...args: any[]): any }
                | Error,
            message?: string | Error
        ): void;

        /**
         * Tests that a function does not throw an error.
         * @param fn The function expected not to throw.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the function throws.
         */
        doesNotThrow(fn: () => any, message?: string | Error): void;

        /**
         * Tests if a function rejects with a specific error.
         * @param fn The async function or Promise expected to reject.
         * @param error Expected error type, regex, or validation function.
         * @param message Optional error message or Error object.
         * @returns Promise that resolves if the assertion passes.
         * @throws AssertionError if the function does not reject as expected.
         */
        rejects(
            fn: (() => Promise<any>) | Promise<any>,
            error?:
                | RegExp
                | ((err: any) => boolean)
                | { new (...args: any[]): any }
                | Error,
            message?: string | Error
        ): Promise<void>;

        /**
         * Tests if a function does not reject.
         * @param fn The async function or Promise expected not to reject.
         * @param message Optional error message or Error object.
         * @returns Promise that resolves if the assertion passes.
         * @throws AssertionError if the function rejects.
         */
        doesNotReject(
            fn: (() => Promise<any>) | Promise<any>,
            message?: string | Error
        ): Promise<void>;

        /**
         * Tests if a value matches a regular expression.
         * @param value The string to test.
         * @param regexp The regular expression to match against.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the value does not match.
         */
        match(value: string, regexp: RegExp, message?: string | Error): void;

        /**
         * Tests if a value does not match a regular expression.
         * @param value The string to test.
         * @param regexp The regular expression to not match against.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the value matches.
         */
        doesNotMatch(value: string, regexp: RegExp, message?: string | Error): void;

        /**
         * Creates a new CallTracker for tracking function calls.
         * @returns A CallTracker instance.
         */
        calls(): CallTracker;

        /**
         * Fails the assertion with a custom message.
         * @param message Optional error message or Error object.
         * @throws AssertionError.
         */
        fail(message?: string | Error): never;

        /**
         * Strictly compares two values using the SameValueZero algorithm.
         * @param actual The value to test.
         * @param expected The expected value.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the values are not the same.
         */
        strictEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Strictly compares two values for inequality using the SameValueZero algorithm.
         * @param actual The value to test.
         * @param expected The value that actual should not equal.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the values are the same.
         */
        notStrictEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests deep strict equality using the SameValueZero algorithm.
         * @param actual The value to test.
         * @param expected The expected value.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the values are not deeply equal.
         */
        deepStrictEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * Tests deep strict inequality using the SameValueZero algorithm.
         * @param actual The value to test.
         * @param expected The value that actual should not equal.
         * @param message Optional error message or Error object.
         * @throws AssertionError if the values are deeply equal.
         */
        notDeepStrictEqual(actual: any, expected: any, message?: string | Error): void;

        /**
         * AssertionError class for compatibility with Node.js assert module.
         */
        AssertionError: typeof AssertionError;
    }

    /**
     * Export the strict assertion module.
     */
    const strict: AssertStrict;
    export = strict;
}

declare module "node:assert/strict" {
    import strict = require("assert/strict");
    export = strict;
}
