/**
 * TypeScript declaration file for Node.js iterator interfaces.
 * 
 * This module provides robust, backwards-compatible iterator and async iterator interfaces
 * for Node.js, augmented with iterator helper methods from lib.esnext.iterator (TypeScript 5.6+).
 * It ensures seamless compatibility with DOM APIs and Node.js iterator protocols, enhancing
 * type safety and developer productivity in TypeScript projects.
 * 
 * WHY IT MATTERS FOR INVESTORS:
 * - Aligns with modern JavaScript ecosystems, supporting TypeScript's growing adoption in
 *   enterprise and open-source projects, increasing market appeal.
 * - Enhances developer experience with precise type definitions, reducing bugs and support costs.
 * - Scalable design ensures compatibility with future TypeScript and Node.js versions,
 *   minimizing maintenance overhead.
 * - Supports DOM-compatible APIs, enabling integration with web-based applications,
 *   expanding use cases and market reach.
 */

declare namespace NodeJS {
    /**
     * Polyfill for TypeScript's intrinsic BuiltinIteratorReturn type, ensuring DOM compatibility.
     * Represents the return type of a standard iterator (e.g., Array.prototype[Symbol.iterator]).
     * 
     * @remarks Used for TypeScript <5.6 or when lib.esnext.iterator is not available.
     */
    type BuiltinIteratorReturn = ReturnType<any[][typeof Symbol.iterator]> extends
        globalThis.Iterator<any, infer TReturn> ? TReturn
        : { value: undefined; done: true };

    /**
     * Base iterator interface for Node.js, compatible with TypeScript 5.5 and 5.6+.
     * Includes iterator helper methods from lib.esnext.iterator when available.
     */
    interface Iterator<T, TReturn = any, TNext = undefined> extends globalThis.Iterator<T, TReturn, TNext> {
        /**
         * Returns the next value in the iterator sequence.
         * @returns Iterator result with value and done status.
         */
        next(...args: [] | [TNext]): IteratorResult<T, TReturn>;

        /**
         * Optional return method to clean up iterator resources.
         * @param value Optional return value.
         * @returns Iterator result indicating completion.
         */
        return?(value?: TReturn): IteratorResult<T, TReturn>;

        /**
         * Optional throw method to handle errors during iteration.
         * @param e Optional error to throw.
         * @returns Iterator result or throws an error.
         */
        throw?(e?: any): IteratorResult<T, TReturn>;

        // Iterator helper methods (lib.esnext.iterator, TypeScript 5.6+)
        /**
         * Maps each value in the iterator using a callback function.
         * @param callbackFn Function to transform each value.
         * @returns New iterator with transformed values.
         */
        map?<U>(callbackFn: (value: T, index: number) => U): Iterator<U, TReturn, TNext>;

        /**
         * Filters values in the iterator based on a predicate.
         * @param predicate Function to test each value.
         * @returns New iterator with values that pass the predicate.
         */
        filter?(predicate: (value: T, index: number) => boolean): Iterator<T, TReturn, TNext>;

        /**
         * Reduces the iterator to a single value.
         * @param reducer Function to combine values.
         * @param initialValue Initial value for reduction.
         * @returns Reduced value.
         */
        reduce?<U>(reducer: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;

        /**
         * Takes a specified number of values from the iterator.
         * @param limit Maximum number of values to take.
         * @returns New iterator with up to the specified number of values.
         */
        take?(limit: number): Iterator<T, TReturn, TNext>;

        /**
         * Skips a specified number of values from the iterator.
         * @param count Number of values to skip.
         * @returns New iterator starting after the skipped values.
         */
        drop?(count: number): Iterator<T, TReturn, TNext>;

        /**
         * Converts the iterator to an array.
         * @returns Array of all values in the iterator.
         */
        toArray?(): T[];

        /**
         * Iterates over all values, applying a callback function.
         * @param callbackFn Function to apply to each value.
         */
        forEach?(callbackFn: (value: T, index: number) => void): void;

        /**
         * Checks if some values satisfy a predicate.
         * @param predicate Function to test each value.
         * @returns True if any value passes the predicate, false otherwise.
         */
        some?(predicate: (value: T, index: number) => boolean): boolean;

        /**
         * Checks if all values satisfy a predicate.
         * @param predicate Function to test each value.
         * @returns True if all values pass the predicate, false otherwise.
         */
        every?(predicate: (value: T, index: number) => boolean): boolean;

        /**
         * Finds the first value that satisfies a predicate.
         * @param predicate Function to test each value.
         * @returns First value that passes the predicate, or undefined.
         */
        find?(predicate: (value: T, index: number) => boolean): T | undefined;
    }

    /**
     * Base async iterator interface for Node.js, compatible with TypeScript 5.5 and 5.6+.
     * Includes async iterator helper methods from lib.esnext.iterator when available.
     */
    interface AsyncIterator<T, TReturn = any, TNext = undefined> extends globalThis.AsyncIterator<T, TReturn, TNext> {
        /**
         * Returns the next value in the async iterator sequence.
         * @returns Promise resolving to iterator result with value and done status.
         */
        next(...args: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;

        /**
         * Optional return method to clean up async iterator resources.
         * @param value Optional return value.
         * @returns Promise resolving to iterator result indicating completion.
         */
        return?(value?: TReturn): Promise<IteratorResult<T, TReturn>>;

        /**
         * Optional throw method to handle errors during async iteration.
         * @param e Optional error to throw.
         * @returns Promise resolving to iterator result or throws an error.
         */
        throw?(e?: any): Promise<IteratorResult<T, TReturn>>;

        // Async iterator helper methods (lib.esnext.iterator, TypeScript 5.6+)
        /**
         * Maps each value in the async iterator using a callback function.
         * @param callbackFn Async function to transform each value.
         * @returns New async iterator with transformed values.
         */
        map?<U>(callbackFn: (value: T, index: number) => Promise<U> | U): AsyncIterator<U, TReturn, TNext>;

        /**
         * Filters values in the async iterator based on a predicate.
         * @param predicate Async function to test each value.
         * @returns New async iterator with values that pass the predicate.
         */
        filter?(predicate: (value: T, index: number) => Promise<boolean> | boolean): AsyncIterator<T, TReturn, TNext>;

        /**
         * Reduces the async iterator to a single value.
         * @param reducer Async function to combine values.
         * @param initialValue Initial value for reduction.
         * @returns Promise resolving to the reduced value.
         */
        reduce?<U>(reducer: (previousValue: U, currentValue: T, currentIndex: number) => Promise<U> | U, initialValue: U): Promise<U>;

        /**
         * Takes a specified number of values from the async iterator.
         * @param limit Maximum number of values to take.
         * @returns New async iterator with up to the specified number of values.
         */
        take?(limit: number): AsyncIterator<T, TReturn, TNext>;

        /**
         * Skips a specified number of values from the async iterator.
         * @param count Number of values to skip.
         * @returns New async iterator starting after the skipped values.
         */
        drop?(count: number): AsyncIterator<T, TReturn, TNext>;

        /**
         * Converts the async iterator to an array.
         * @returns Promise resolving to an array of all values in the iterator.
         */
        toArray?(): Promise<T[]>;

        /**
         * Iterates over all values, applying an async callback function.
         * @param callbackFn Async function to apply to each value.
         * @returns Promise that resolves when iteration is complete.
         */
        forEach?(callbackFn: (value: T, index: number) => Promise<void> | void): Promise<void>;

        /**
         * Checks if some values satisfy an async predicate.
         * @param predicate Async function to test each value.
         * @returns Promise resolving to true if any value passes, false otherwise.
         */
        some?(predicate: (value: T, index: number) => Promise<boolean> | boolean): Promise<boolean>;

        /**
         * Checks if all values satisfy an async predicate.
         * @param predicate Async function to test each value.
         * @returns Promise resolving to true if all values pass, false otherwise.
         */
        every?(predicate: (value: T, index: number) => Promise<boolean> | boolean): Promise<boolean>;

        /**
         * Finds the first value that satisfies an async predicate.
         * @param predicate Async function to test each value.
         * @returns Promise resolving to the first value that passes, or undefined.
         */
        find?(predicate: (value: T, index: number) => Promise<boolean> | boolean): Promise<T | undefined>;
    }

    /**
     * IteratorObject interface for backwards compatibility with TypeScript <5.6.
     * Extends Iterator to ensure DOM-compatible iterator assignability.
     */
    interface IteratorObject<T, TReturn = BuiltinIteratorReturn, TNext = undefined> extends Iterator<T, TReturn, TNext> {
        [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;
    }

    /**
     * AsyncIteratorObject interface for backwards compatibility with TypeScript <5.6.
     * Extends AsyncIterator to ensure DOM-compatible async iterator assignability.
     */
    interface AsyncIteratorObject<T, TReturn = any, TNext = undefined> extends AsyncIterator<T, TReturn, TNext> {
        [Symbol.asyncIterator](): AsyncIteratorObject<T, TReturn, TNext>;
    }
}
