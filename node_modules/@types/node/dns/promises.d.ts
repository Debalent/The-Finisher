/**
 * TypeScript declaration file for Node.js 'dns/promises' module.
 * 
 * This module provides a robust, type-safe interface for asynchronous DNS resolution
 * using Promise-based APIs, accessible via `import { promises as dnsPromises } from 'node:dns'`
 * or `import dnsPromises from 'node:dns/promises'`. It supports enterprise-grade applications
 * with comprehensive type definitions, detailed error handling, and compatibility with modern
 * DNS protocols.
 * 
 * WHY IT MATTERS FOR INVESTORS:
 * - Aligns with Node.js's growing adoption in enterprise and cloud environments, increasing
 *   market appeal for networked applications.
 * - Enhances developer productivity with precise type definitions, reducing bugs and support costs.
 * - Scalable design ensures compatibility with future Node.js and DNS protocol advancements,
 *   minimizing maintenance overhead.
 * - Supports critical use cases like load balancing, service discovery, and security (e.g., CAA, TLSA),
 *   enabling integration with modern web and cloud infrastructure.
 * 
 * @since v10.6.0
 */

declare module "dns/promises" {
    import {
        AnyRecord,
        CaaRecord,
        LookupAddress,
        LookupAllOptions,
        LookupOneOptions,
        LookupOptions,
        MxRecord,
        NaptrRecord,
        RecordWithTtl,
        ResolveOptions,
        ResolverOptions,
        ResolveWithTtlOptions,
        SoaRecord,
        SrvRecord,
        TlsaRecord,
    } from "node:dns";

    /**
     * Error codes specific to DNS operations, used in rejected Promises.
     */
    type DNSErrorCode =
        | "ENODATA"
        | "EFORMERR"
        | "ESERVFAIL"
        | "ENOTFOUND"
        | "ENOTIMP"
        | "EREFUSED"
        | "EBADQUERY"
        | "EBADNAME"
        | "EBADFAMILY"
        | "EBADRESP"
        | "ECONNREFUSED"
        | "ETIMEOUT"
        | "EOF"
        | "EFILE"
        | "ENOMEM"
        | "EDESTRUCTION"
        | "EBADSTR"
        | "EBADFLAGS"
        | "ENONAME"
        | "EBADHINTS"
        | "ENOTINITIALIZED"
        | "ELOADIPHLPAPI"
        | "EADDRGETNETWORKPARAMS"
        | "ECANCELLED";

    /**
     * DNS-specific Error class for rejected Promises.
     */
    interface DNSError extends Error {
        code: DNSErrorCode;
        hostname?: string;
        syscall: string;
    }

    /**
     * Retrieves the current DNS server addresses used for resolution.
     * Returns an array of IP address strings formatted according to RFC 5952,
     * including ports if non-standard (e.g., ['4.4.4.4', '2001:4860:4860::8888:1053']).
     * 
     * @returns Array of DNS server addresses.
     * @since v10.6.0
     */
    function getServers(): string[];

    /**
     * Sets the DNS server addresses for resolution.
     * Accepts an array of RFC 5952-formatted addresses, with optional ports.
     * Throws an error if any address is invalid or if called during an active DNS query.
     * 
     * Example:
     * ```ts
     * import { promises as dns } from 'node:dns';
     * dns.setServers(['4.4.4.4', '[2001:4860:4860::8888]:1053']);
     * ```
     * 
     * @param servers Array of RFC 5952-formatted addresses.
     * @throws {Error} If an invalid address is provided or a query is in progress.
     * @since v10.6.0
     */
    function setServers(servers: readonly string[]): void;

    /**
     * Gets the default result order for DNS lookups ('ipv4first' or 'verbatim').
     * 
     * @returns Current default result order.
     * @since v20.1.0
     */
    function getDefaultResultOrder(): "ipv4first" | "verbatim";

    /**
     * Sets the default result order for DNS lookups.
     * Options: 'ipv4first', 'ipv6first', or 'verbatim'.
     * Takes precedence over CLI `--dns-result-order`.
     * Does not affect worker threads.
     * 
     * @param order Result order ('ipv4first', 'ipv6first', or 'verbatim').
     * @throws {TypeError} If order is invalid.
     * @since v16.4.0, v14.18.0
     */
    function setDefaultResultOrder(order: "ipv4first" | "ipv6first" | "verbatim"): void;

    /**
     * Resolves a hostname to the first A (IPv4) or AAAA (IPv6) record.
     * Supports optional family (4 or 6) or detailed options for hints and ordering.
     * If options.all is true, returns an array of LookupAddress objects.
     * Rejects with a DNSError if the lookup fails (e.g., ENOTFOUND).
     * 
     * Example:
     * ```ts
     * import { promises as dns } from 'node:dns';
     * const result = await dns.lookup('example.com', { family: 6, all: true });
     * console.log(result); // [{ address: '2606:2800:220:1:248:1893:25c8:1946', family: 6 }]
     * ```
     * 
     * @param hostname Hostname to resolve.
     * @param options Lookup options or family number (4 or 6).
     * @returns Promise resolving to a single address or array of addresses.
     * @throws {DNSError} If the lookup fails.
     * @since v10.6.0
     */
    function lookup(hostname: string, family?: 4 | 6): Promise<LookupAddress>;
    function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;
    function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;
    function lookup(hostname: string, options?: LookupOptions): Promise<LookupAddress | LookupAddress[]>;

    /**
     * Resolves an IP address and port to a hostname and service using getnameinfo.
     * Rejects with a TypeError for invalid IP addresses or ports.
     * 
     * Example:
     * ```ts
     * import { promises as dns } from 'node:dns';
     * const { hostname, service } = await dns.lookupService('127.0.0.1', 22);
     * console.log(hostname, service); // localhost, ssh
     * ```
     * 
     * @param address IP address to resolve.
     * @param port Port number.
     * @returns Promise resolving to an object with hostname and service.
     * @throws {TypeError} If address or port is invalid.
     * @throws {DNSError} If the lookup fails.
     * @since v10.6.0
     */
    function lookupService(address: string, port: number): Promise<{ hostname: string; service: string }>;

    /**
     * Resolves a hostname to DNS resource records based on the specified rrtype.
     * Returns an array of records or a single record for SOA.
     * Rejects with a DNSError if the query fails.
     * 
     * Example:
     * ```ts
     * import { promises as dns } from 'node:dns';
     * const mxRecords = await dns.resolve('example.com', 'MX');
     * console.log(mxRecords); // [{ priority: 10, exchange: 'mx.example.com' }, ...]
     * ```
     * 
     * @param hostname Hostname to resolve.
     * @param rrtype Resource record type (e.g., 'A', 'MX', 'SOA').
     * @returns Promise resolving to an array of records or a single SOA record.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolve(hostname: string, rrtype?: "A"): Promise<string[]>;
    function resolve(hostname: string, rrtype: "AAAA" | "CNAME" | "NS" | "PTR"): Promise<string[]>;
    function resolve(hostname: string, rrtype: "ANY"): Promise<AnyRecord[]>;
    function resolve(hostname: string, rrtype: "CAA"): Promise<CaaRecord[]>;
    function resolve(hostname: string, rrtype: "MX"): Promise<MxRecord[]>;
    function resolve(hostname: string, rrtype: "NAPTR"): Promise<NaptrRecord[]>;
    function resolve(hostname: string, rrtype: "SOA"): Promise<SoaRecord>;
    function resolve(hostname: string, rrtype: "SRV"): Promise<SrvRecord[]>;
    function resolve(hostname: string, rrtype: "TLSA"): Promise<TlsaRecord[]>;
    function resolve(hostname: string, rrtype: "TXT"): Promise<string[][]>;
    function resolve(hostname: string, rrtype: string): Promise<
        | string[]
        | CaaRecord[]
        | MxRecord[]
        | NaptrRecord[]
        | SoaRecord
        | SrvRecord[]
        | TlsaRecord[]
        | string[][]
        | AnyRecord[]
    >;

    /**
     * Resolves IPv4 addresses (A records) for a hostname.
     * Supports options for TTL or custom resolvers.
     * 
     * @param hostname Hostname to resolve.
     * @param options Resolve options (e.g., ttl: true).
     * @returns Promise resolving to an array of IPv4 addresses or records with TTL.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolve4(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;
    function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;
    function resolve4(hostname: string): Promise<string[]>;

    /**
     * Resolves IPv6 addresses (AAAA records) for a hostname.
     * Supports options for TTL or custom resolvers.
     * 
     * @param hostname Hostname to resolve.
     * @param options Resolve options (e.g., ttl: true).
     * @returns Promise resolving to an array of IPv6 addresses or records with TTL.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolve6(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;
    function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;
    function resolve6(hostname: string): Promise<string[]>;

    /**
     * Resolves all record types (ANY query) for a hostname.
     * Returns an array of records with type-specific properties.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of AnyRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveAny(hostname: string): Promise<AnyRecord[]>;

    /**
     * Resolves CAA records for a hostname, supporting security-critical use cases.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of CaaRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v15.0.0, v14.17.0
     */
    function resolveCaa(hostname: string): Promise<CaaRecord[]>;

    /**
     * Resolves CNAME records for a hostname.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of canonical name strings.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveCname(hostname: string): Promise<string[]>;

    /**
     * Resolves MX records for a hostname, critical for email routing.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of MxRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveMx(hostname: string): Promise<MxRecord[]>;

    /**
     * Resolves NAPTR records for a hostname, supporting advanced service discovery.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of NaptrRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;

    /**
     * Resolves NS records for a hostname.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of name server strings.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveNs(hostname: string): Promise<string[]>;

    /**
     * Resolves PTR records for a hostname, used for reverse DNS lookups.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of pointer record strings.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolvePtr(hostname: string): Promise<string[]>;

    /**
     * Resolves SOA record for a hostname, critical for DNS zone management.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to a SoaRecord object.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveSoa(hostname: string): Promise<SoaRecord>;

    /**
     * Resolves SRV records for a hostname, supporting service discovery.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of SrvRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveSrv(hostname: string): Promise<SrvRecord[]>;

    /**
     * Resolves TLSA records for a hostname, supporting secure certificate associations.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to an array of TlsaRecord objects.
     * @throws {DNSError} If the query fails.
     * @since v23.9.0, v22.15.0
     */
    function resolveTlsa(hostname: string): Promise<TlsaRecord[]>;

    /**
     * Resolves TXT records for a hostname, supporting metadata like SPF.
     * 
     * @param hostname Hostname to resolve.
     * @returns Promise resolving to a two-dimensional array of text record chunks.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function resolveTxt(hostname: string): Promise<string[][]>;

    /**
     * Performs a reverse DNS query to resolve an IP address to hostnames.
     * 
     * @param ip IPv4 or IPv6 address to resolve.
     * @returns Promise resolving to an array of hostnames.
     * @throws {DNSError} If the query fails.
     * @since v10.6.0
     */
    function reverse(ip: string): Promise<string[]>;

    /**
     * Independent DNS resolver for custom server configurations.
     * Supports all resolve methods and server management, with isolated settings.
     * 
     * Example:
     * ```ts
     * import { promises as dns } from 'node:dns';
     * const resolver = new dns.Resolver();
     * resolver.setServers(['4.4.4.4']);
     * const addresses = await resolver.resolve4('example.com');
     * console.log(addresses); // ['93.184.216.34']
     * ```
     * 
     * @since v10.6.0
     */
    class Resolver {
        constructor(options?: ResolverOptions);

        /**
         * Cancels all outstanding DNS queries made by this resolver.
         * Rejects pending queries with an ECANCELLED error.
         * 
         * @since v8.3.0
         */
        cancel(): void;

        /**
         * Sets the local IP address for outbound DNS queries.
         * Useful for multi-homed systems to specify interfaces.
         * 
         * @param ipv4 IPv4 address (default: '0.0.0.0').
         * @param ipv6 IPv6 address (default: '::0').
         * @since v15.1.0, v14.17.0
         */
        setLocalAddress(ipv4?: string, ipv6?: string): void;

        getServers: typeof getServers;
        setServers: typeof setServers;
        resolve: typeof resolve;
        resolve4: typeof resolve4;
        resolve6: typeof resolve6;
        resolveAny: typeof resolveAny;
        resolveCaa: typeof resolveCaa;
        resolveCname: typeof resolveCname;
        resolveMx: typeof resolveMx;
        resolveNaptr: typeof resolveNaptr;
        resolveNs: typeof resolveNs;
        resolvePtr: typeof resolvePtr;
        resolveSoa: typeof resolveSoa;
        resolveSrv: typeof resolveSrv;
        resolveTlsa: typeof resolveTlsa;
        resolveTxt: typeof resolveTxt;
        reverse: typeof reverse;
    }

    // Export DNS error codes as constants
    const NODATA: "ENODATA";
    const FORMERR: "EFORMERR";
    const SERVFAIL: "ESERVFAIL";
    const NOTFOUND: "ENOTFOUND";
    const NOTIMP: "ENOTIMP";
    const REFUSED: "EREFUSED";
    const BADQUERY: "EBADQUERY";
    const BADNAME: "EBADNAME";
    const BADFAMILY: "EBADFAMILY";
    const BADRESP: "EBADRESP";
    const CONNREFUSED: "ECONNREFUSED";
    const TIMEOUT: "ETIMEOUT";
    const EOF: "EOF";
    const FILE: "EFILE";
    const NOMEM: "ENOMEM";
    const DESTRUCTION: "EDESTRUCTION";
    const BADSTR: "EBADSTR";
    const BADFLAGS: "EBADFLAGS";
    const NONAME: "ENONAME";
    const BADHINTS: "EBADHINTS";
    const NOTINITIALIZED: "ENOTINITIALIZED";
    const LOADIPHLPAPI: "ELOADIPHLPAPI";
    const ADDRGETNETWORKPARAMS: "EADDRGETNETWORKPARAMS";
    const CANCELLED: "ECANCELLED";
}

declare module "node:dns/promises" {
    export * from "dns/promises";
}
