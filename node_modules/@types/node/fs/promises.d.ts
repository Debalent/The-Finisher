/**
 * TypeScript declaration file for Node.js 'fs/promises' module.
 * 
 * This module provides asynchronous, Promise-based file system operations for Node.js,
 * accessible via `import { promises as fs } from 'node:fs'`. It supports enterprise-grade
 * applications with comprehensive type definitions, robust error handling, and compatibility
 * with modern file system APIs, including streams, file handles, and async iteration.
 * 
 * WHY IT MATTERS FOR INVESTORS:
 * - Aligns with Node.js's widespread use in enterprise, cloud, and web applications,
 *   increasing market appeal for file-intensive workloads.
 * - Enhances developer productivity with precise type definitions, reducing bugs and
 *   support costs in production environments.
 * - Scalable design supports high-performance file operations, critical for large-scale
 *   systems like data processing pipelines and content management platforms.
 * - Robust error handling and threadpool awareness ensure reliability for concurrent
 *   operations, minimizing data corruption risks.
 * - Supports modern JavaScript features like async iterables and web streams, aligning
 *   with evolving web standards and expanding use cases.
 * 
 * @since v10.0.0
 */

declare module "fs/promises" {
    import { Abortable } from "node:events";
    import { Stream } from "node:stream";
    import { ReadableStream } from "node:stream/web";
    import {
        BigIntStats,
        BigIntStatsFs,
        BufferEncodingOption,
        constants as fsConstants,
        CopyOptions,
        Dir,
        Dirent,
        GlobOptions,
        GlobOptionsWithFileTypes,
        GlobOptionsWithoutFileTypes,
        MakeDirectoryOptions,
        Mode,
        ObjectEncodingOptions,
        OpenDirOptions,
        OpenMode,
        PathLike,
        ReadPosition,
        ReadStream,
        ReadVResult,
        RmDirOptions,
        RmOptions,
        StatFsOptions,
        StatOptions,
        Stats,
        StatsFs,
        TimeLike,
        WatchEventType,
        WatchOptions,
        WriteStream,
        WriteVResult,
    } from "node:fs";
    import { Interface as ReadlineInterface } from "node:readline";

    /**
     * Error type for file system operations, with specific error codes.
     */
    interface FSError extends Error {
        code?:
            | "ENOENT"
            | "ENOTDIR"
            | "EISDIR"
            | "EACCES"
            | "EPERM"
            | "EBUSY"
            | "EINVAL"
            | "EMFILE"
            | "ENOTEMPTY"
            | "EEXIST"
            | string;
        path?: string;
        syscall?: string;
    }

    /**
     * Information about a file system change event.
     */
    interface FileChangeInfo<T extends string | Buffer> {
        eventType: WatchEventType;
        filename: T | null;
    }

    /**
     * Options for file handle read operations.
     */
    interface FileReadOptions<T extends NodeJS.ArrayBufferView = Buffer> {
        buffer?: T;
        offset?: number | null;
        length?: number | null;
        position?: ReadPosition | null;
    }

    /**
     * Result of a file read operation.
     */
    interface FileReadResult<T extends NodeJS.ArrayBufferView> {
        bytesRead: number;
        buffer: T;
    }

    /**
     * Options for creating a read stream.
     */
    interface CreateReadStreamOptions extends Abortable {
        encoding?: BufferEncoding | null;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        end?: number;
        highWaterMark?: number;
    }

    /**
     * Options for creating a write stream.
     */
    interface CreateWriteStreamOptions {
        encoding?: BufferEncoding | null;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        highWaterMark?: number;
        flush?: boolean;
    }

    /**
     * Options for file open and mode settings.
     */
    interface FlagAndOpenMode {
        mode?: Mode;
        flag?: OpenMode;
    }

    /**
     * FileHandle class for managing open file descriptors.
     * @since v10.0.0
     */
    interface FileHandle {
        /**
         * The numeric file descriptor managed by the FileHandle object.
         */
        readonly fd: number;

        /**
         * Appends data to the file. Alias for writeFile with append mode.
         * @param data Data to append (string or Uint8Array).
         * @param options Encoding options or signal for aborting.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         */
        appendFile(
            data: string | Uint8Array,
            options?: (ObjectEncodingOptions & Abortable) | BufferEncoding | null
        ): Promise<void>;

        /**
         * Changes the ownership of the file.
         * @param uid User ID of the new owner.
         * @param gid Group ID of the new group.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        chown(uid: number, gid: number): Promise<void>;

        /**
         * Modifies the file permissions.
         * @param mode File mode bit mask.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        chmod(mode: Mode): Promise<void>;

        /**
         * Creates a readable stream for the file.
         * @param options Stream configuration options.
         * @returns A ReadStream instance.
         * @since v16.11.0
         */
        createReadStream(options?: CreateReadStreamOptions): ReadStream;

        /**
         * Creates a writable stream for the file.
         * @param options Stream configuration options.
         * @returns A WriteStream instance.
         * @since v16.11.0
         */
        createWriteStream(options?: CreateWriteStreamOptions): WriteStream;

        /**
         * Flushes data to storage without syncing metadata.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        datasync(): Promise<void>;

        /**
         * Flushes all data and metadata to storage.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        sync(): Promise<void>;

        /**
         * Reads data into a buffer.
         * @param buffer Buffer to read into.
         * @param offset Offset in the buffer to start writing.
         * @param length Number of bytes to read.
         * @param position File position to read from.
         * @returns Promise resolving to read result.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        read<T extends NodeJS.ArrayBufferView>(
            buffer: T,
            offset?: number | null,
            length?: number | null,
            position?: ReadPosition | null
        ): Promise<FileReadResult<T>>;
        read<T extends NodeJS.ArrayBufferView = Buffer>(
            options?: FileReadOptions<T>
        ): Promise<FileReadResult<T>>;

        /**
         * Creates a web-readable stream for the file.
         * @returns A ReadableStream for the file contents.
         * @throws {FSError} If called multiple times or after closing.
         * @since v17.0.0
         */
        readableWebStream(): ReadableStream;

        /**
         * Reads the entire file contents.
         * @param options Encoding or other read options.
         * @returns Promise resolving to file contents (Buffer or string).
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        readFile(
            options?: ({ encoding?: null } & Abortable) | null
        ): Promise<Buffer>;
        readFile(
            options: ({ encoding: BufferEncoding } & Abortable) | BufferEncoding
        ): Promise<string>;
        readFile(
            options?: (ObjectEncodingOptions & Abortable) | BufferEncoding | null
        ): Promise<string | Buffer>;

        /**
         * Creates a readline interface for streaming file lines.
         * @param options Stream configuration options.
         * @returns A ReadlineInterface instance.
         * @since v18.11.0
         */
        readLines(options?: CreateReadStreamOptions): ReadlineInterface;

        /**
         * Retrieves file statistics.
         * @param opts Stat options (e.g., bigint).
         * @returns Promise resolving to Stats or BigIntStats.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        stat(
            opts?: StatOptions & { bigint?: false }
        ): Promise<Stats>;
        stat(
            opts: StatOptions & { bigint: true }
        ): Promise<BigIntStats>;
        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;

        /**
         * Truncates or extends the file to a specified length.
         * @param len Length in bytes (default: 0).
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        truncate(len?: number): Promise<void>;

        /**
         * Updates file timestamps.
         * @param atime Access time.
         * @param mtime Modification time.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        utimes(atime: TimeLike, mtime: TimeLike): Promise<void>;

        /**
         * Writes data to the file.
         * @param buffer Data buffer to write.
         * @param offset Buffer offset to start writing from.
         * @param length Number of bytes to write.
         * @param position File position to write to.
         * @returns Promise resolving to write result.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        write<TBuffer extends Uint8Array>(
            buffer: TBuffer,
            offset?: number | null,
            length?: number | null,
            position?: number | null
        ): Promise<{ bytesWritten: number; buffer: TBuffer }>;
        write<TBuffer extends Uint8Array>(
            buffer: TBuffer,
            options?: { offset?: number; length?: number; position?: number }
        ): Promise<{ bytesWritten: number; buffer: TBuffer }>;
        write(
            data: string,
            position?: number | null,
            encoding?: BufferEncoding | null
        ): Promise<{ bytesWritten: number; buffer: string }>;

        /**
         * Writes multiple buffers to the file.
         * @param buffers Array of buffers to write.
         * @param position File position to write to.
         * @returns Promise resolving to write result.
         * @throws {FSError} If the operation fails.
         * @since v12.9.0
         */
        writev(
            buffers: readonly NodeJS.ArrayBufferView[],
            position?: number
        ): Promise<WriteVResult>;

        /**
         * Reads into multiple buffers.
         * @param buffers Array of buffers to read into.
         * @param position File position to read from.
         * @returns Promise resolving to read result.
         * @throws {FSError} If the operation fails.
         * @since v13.13.0, v12.17.0
         */
        readv(
            buffers: readonly NodeJS.ArrayBufferView[],
            position?: number
        ): Promise<ReadVResult>;

        /**
         * Closes the file handle, ensuring all operations complete.
         * @returns Promise resolving to undefined upon success.
         * @throws {FSError} If the operation fails.
         * @since v10.0.0
         */
        close(): Promise<void>;

        /**
         * Async dispose method for closing the file handle.
         * @returns Promise resolving to undefined upon success.
         * @since v20.4.0
         */
        [Symbol.asyncDispose](): Promise<void>;
    }

    /**
     * File system constants (e.g., F_OK, R_OK, W_OK).
     */
    const constants: typeof fsConstants;

    /**
     * Tests user permissions for a file or directory.
     * @param path File or directory path.
     * @param mode Access mode (e.g., fs.constants.F_OK).
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If access is denied (e.g., EACCES).
     * @since v10.0.0
     */
    function access(path: PathLike, mode?: number): Promise<void>;

    /**
     * Appends data to a file, creating it if it doesn't exist.
     * @param path File path or FileHandle.
     * @param data Data to append (string or Uint8Array).
     * @param options Encoding, mode, and flush options.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function appendFile(
        path: PathLike | FileHandle,
        data: string | Uint8Array,
        options?: (ObjectEncodingOptions & FlagAndOpenMode & { flush?: boolean }) | BufferEncoding | null
    ): Promise<void>;

    /**
     * Changes ownership of a file or directory.
     * @param path File or directory path.
     * @param uid User ID of the new owner.
     * @param gid Group ID of the new group.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function chown(path: PathLike, uid: number, gid: number): Promise<void>;

    /**
     * Changes permissions of a file or directory.
     * @param path File or directory path.
     * @param mode File mode bit mask.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function chmod(path: PathLike, mode: Mode): Promise<void>;

    /**
     * Changes permissions of a symbolic link (macOS only).
     * @param path Symbolic link path.
     * @param mode File mode bit mask.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @deprecated Since v10.0.0
     */
    function lchmod(path: PathLike, mode: Mode): Promise<void>;

    /**
     * Changes ownership of a symbolic link.
     * @param path Symbolic link path.
     * @param uid User ID of the new owner.
     * @param gid Group ID of the new group.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function lchown(path: PathLike, uid: number, gid: number): Promise<void>;

    /**
     * Copies a file from source to destination.
     * @param src Source file path.
     * @param dest Destination file path.
     * @param mode Copy mode (e.g., COPYFILE_EXCL).
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>;

    /**
     * Creates a hard link from existing path to new path.
     * @param existingPath Source path.
     * @param newPath Destination path.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;

    /**
     * Creates a directory, optionally recursively.
     * @param path Directory path.
     * @param options Mode or recursive options.
     * @returns Promise resolving to created path or undefined.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function mkdir(
        path: PathLike,
        options?: Mode | (MakeDirectoryOptions & { recursive?: boolean }) | null
    ): Promise<string | undefined>;
    function mkdir(
        path: PathLike,
        options: MakeDirectoryOptions & { recursive: true }
    ): Promise<string | undefined>;

    /**
     * Creates a unique temporary directory.
     * @param prefix Directory prefix.
     * @param options Encoding options.
     * @returns Promise resolving to the created directory path.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function mkdtemp(
        prefix: string,
        options?: ObjectEncodingOptions | BufferEncoding | null
    ): Promise<string | Buffer>;

    /**
     * Opens a file and returns a FileHandle.
     * @param path File path.
     * @param flags File open flags (default: 'r').
     * @param mode File mode for new files (default: 0o666).
     * @returns Promise resolving to a FileHandle.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function open(path: PathLike, flags?: string | number, mode?: Mode): Promise<FileHandle>;

    /**
     * Opens a directory for iteration.
     * @param path Directory path.
     * @param options Directory open options.
     * @returns Promise resolving to a Dir object.
     * @throws {FSError} If the operation fails.
     * @since v12.12.0
     */
    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;

    /**
     * Reads the contents of a directory.
     * @param path Directory path.
     * @param options Encoding and file type options.
     * @returns Promise resolving to an array of filenames or Dirent objects.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function readdir(
        path: PathLike,
        options?: (ObjectEncodingOptions & { withFileTypes?: false; recursive?: boolean }) | BufferEncoding | null
    ): Promise<string[] | Buffer[]>;
    function readdir(
        path: PathLike,
        options: ObjectEncodingOptions & { withFileTypes: true; recursive?: boolean }
    ): Promise<Dirent[]>;
    function readdir(
        path: PathLike,
        options: { encoding: "buffer"; withFileTypes: true; recursive?: boolean }
    ): Promise<Dirent<Buffer>[]>;

    /**
     * Reads the target of a symbolic link.
     * @param path Symbolic link path.
     * @param options Encoding options.
     * @returns Promise resolving to the link target.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function readlink(
        path: PathLike,
        options?: ObjectEncodingOptions | BufferEncoding | null
    ): Promise<string | Buffer>;

    /**
     * Reads the entire contents of a file.
     * @param path File path or FileHandle.
     * @param options Encoding and flag options.
     * @returns Promise resolving to file contents (Buffer or string).
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function readFile(
        path: PathLike | FileHandle,
        options?: ({ encoding?: null; flag?: OpenMode } & Abortable) | null
    ): Promise<Buffer>;
    function readFile(
        path: PathLike | FileHandle,
        options: ({ encoding: BufferEncoding; flag?: OpenMode } & Abortable) | BufferEncoding
    ): Promise<string>;
    function readFile(
        path: PathLike | FileHandle,
        options?: (ObjectEncodingOptions & { flag?: OpenMode } & Abortable) | BufferEncoding | null
    ): Promise<string | Buffer>;

    /**
     * Resolves the canonical path of a file.
     * @param path File path.
     * @param options Encoding options.
     * @returns Promise resolving to the resolved path.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function realpath(
        path: PathLike,
        options?: ObjectEncodingOptions | BufferEncoding | null
    ): Promise<string | Buffer>;

    /**
     * Renames a file or directory.
     * @param oldPath Source path.
     * @param newPath Destination path.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;

    /**
     * Removes a file or symbolic link.
     * @param path File or symbolic link path.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function unlink(path: PathLike): Promise<void>;

    /**
     * Removes a directory.
     * @param path Directory path.
     * @param options Recursive or force options.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails (e.g., ENOTDIR).
     * @since v10.0.0
     */
    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;

    /**
     * Removes files or directories (like `rm -rf`).
     * @param path File or directory path.
     * @param options Recursive or force options.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v14.14.0
     */
    function rm(path: PathLike, options?: RmOptions): Promise<void>;

    /**
     * Retrieves statistics for a file or directory.
     * @param path File or directory path.
     * @param opts Stat options (e.g., bigint).
     * @returns Promise resolving to Stats or BigIntStats.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function stat(
        path: PathLike,
        opts?: StatOptions & { bigint?: false }
    ): Promise<Stats>;
    function stat(
        path: PathLike,
        opts: StatOptions & { bigint: true }
    ): Promise<BigIntStats>;
    function stat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;

    /**
     * Retrieves statistics for a symbolic link.
     * @param path Symbolic link path.
     * @param opts Stat options (e.g., bigint).
     * @returns Promise resolving to Stats or BigIntStats.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function lstat(
        path: PathLike,
        opts?: StatOptions & { bigint?: false }
    ): Promise<Stats>;
    function lstat(
        path: PathLike,
        opts: StatOptions & { bigint: true }
    ): Promise<BigIntStats>;
    function lstat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;

    /**
     * Retrieves file system statistics.
     * @param path File system path.
     * @param opts Stat options (e.g., bigint).
     * @returns Promise resolving to StatsFs or BigIntStatsFs.
     * @throws {FSError} If the operation fails.
     * @since v19.6.0, v18.15.0
     */
    function statfs(
        path: PathLike,
        opts?: StatFsOptions & { bigint?: false }
    ): Promise<StatsFs>;
    function statfs(
        path: PathLike,
        opts: StatFsOptions & { bigint: true }
    ): Promise<BigIntStatsFs>;
    function statfs(path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>;

    /**
     * Creates a symbolic link.
     * @param target Target path.
     * @param path Symbolic link path.
     * @param type Link type (Windows only: 'dir', 'file', 'junction').
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;

    /**
     * Truncates or extends a file to a specified length.
     * @param path File path.
     * @param len Length in bytes (default: 0).
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function truncate(path: PathLike, len?: number): Promise<void>;

    /**
     * Updates timestamps of a file or directory.
     * @param path File or directory path.
     * @param atime Access time.
     * @param mtime Modification time.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;

    /**
     * Updates timestamps of a symbolic link.
     * @param path Symbolic link path.
     * @param atime Access time.
     * @param mtime Modification time.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v14.5.0, v12.19.0
     */
    function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;

    /**
     * Writes data to a file, replacing it if it exists.
     * @param file File path or FileHandle.
     * @param data Data to write (string, buffer, iterable, or stream).
     * @param options Encoding, mode, and flush options.
     * @returns Promise resolving to undefined upon success.
     * @throws {FSError} If the operation fails.
     * @since v10.0.0
     */
    function writeFile(
        file: PathLike | FileHandle,
        data:
            | string
            | NodeJS.ArrayBufferView
            | Iterable<string | NodeJS.ArrayBufferView>
            | AsyncIterable<string | NodeJS.ArrayBufferView>
            | Stream,
        options?: (ObjectEncodingOptions & { mode?: Mode; flag?: OpenMode; flush?: boolean } & Abortable) | BufferEncoding | null
    ): Promise<void>;

    /**
     * Watches a file or directory for changes.
     * @param filename File or directory path.
     * @param options Encoding and watch options.
     * @returns AsyncIterable of file change events.
     * @throws {FSError} If the operation fails.
     * @since v15.9.0, v14.18.0
     */
    function watch(
        filename: PathLike,
        options?: WatchOptions | BufferEncoding
    ): AsyncIterable<FileChangeInfo<string>>;
    function watch(
        filename: PathLike,
        options: (WatchOptions & { encoding: "buffer" }) | "buffer"
    ): AsyncIterable<FileChangeInfo<Buffer>>;
}

declare module "node:fs/promises" {
    export * from "fs/promises";
}
